<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Manjaro 安装后速查手册</title>
    <link href="/2023/04/20/manjaro-cheatsheet/"/>
    <url>/2023/04/20/manjaro-cheatsheet/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一本关于Manjaro安装命令的速查手册，包括更换镜像，配置中文输入法与主题，安装常用软件以及一些其他的自定义设置等。</p></blockquote><h3 id="基本配置">基本配置</h3><h4 id="更换国内镜像">更换国内镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman-mirrors -i -c China -m rank<br>sudo pacman -Syy<br></code></pre></td></tr></table></figure><h4 id="中文输入法">中文输入法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-zhwiki<br></code></pre></td></tr></table></figure><p>打开 <code>/etc/environment</code>，写入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GTK_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx5  <br>QT_IM_MODULE  <span class="hljs-attribute">DEFAULT</span>=fcitx5  <br>XMODIFIERS    <span class="hljs-attribute">DEFAULT</span>=@im=fcitx5  <br>INPUT_METHOD  <span class="hljs-attribute">DEFAULT</span>=fcitx5  <br>SDL_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx5<br></code></pre></td></tr></table></figure><p>替换四季简约主题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 将整个项目clone到本地：</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/thep0y/</span>fcitx5-themes.git<br><br><span class="hljs-comment"># 将想要使用的皮肤复制到该放的位置，以`spring`为例(下同)：</span><br>cd fcitx5-themes<br>cp spring ~<span class="hljs-regexp">/.local/</span>share<span class="hljs-regexp">/fcitx5/</span>themes -r<br><br><span class="hljs-comment"># 修改皮肤配置文件(若没有配置文件则自动创建)：</span><br>vim ~<span class="hljs-regexp">/.config/</span>fcitx5<span class="hljs-regexp">/conf/</span>classicui.conf<br></code></pre></td></tr></table></figure><p>将下面的参数复制进去（记得修改字体）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 垂直候选列表</span><br>Vertical Candidate <span class="hljs-attribute">List</span>=<span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 按屏幕 DPI 使用</span><br><span class="hljs-attribute">PerScreenDPI</span>=<span class="hljs-literal">True</span><br><br><span class="hljs-comment"># Font (设置成你喜欢的字体)</span><br><span class="hljs-attribute">Font</span>=<span class="hljs-string">&quot;思源黑体 CN Medium 13&quot;</span><br><br><span class="hljs-comment"># 主题(这里要改成你想要使用的主题名，主题名就在下面)</span><br><span class="hljs-attribute">Theme</span>=spring<br></code></pre></td></tr></table></figure><h4 id="AUR-helper-yay-paru">AUR helper : yay, paru</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S yay<br>sudo pacman -S paru<br></code></pre></td></tr></table></figure><h3 id="常用软件">常用软件</h3><h4 id="编译工具">编译工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Sy base-devel<br></code></pre></td></tr></table></figure><h4 id="proxychains">proxychains</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S proxychains<br></code></pre></td></tr></table></figure><p>yay 和 proxychains 之间存在go依赖的问题。故切换使用 <code>paru</code> 。</p><h4 id="科学上网">科学上网</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">paru -S clash clash-for-windows-bin<br></code></pre></td></tr></table></figure><p><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/">Releases · Fndroid/clash_for_windows_pkg</a></p><h4 id="VSCode">VSCode</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S visual-studio-code-bin<br></code></pre></td></tr></table></figure><h4 id="Anaconda">Anaconda</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S anaconda<br></code></pre></td></tr></table></figure><h4 id="WPS">WPS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S wps-office<br>paru -S ttf-wps-fonts<br></code></pre></td></tr></table></figure><h4 id="Microsoft-Edge-浏览器">Microsoft Edge 浏览器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S microsoft-edge-dev-bin<br></code></pre></td></tr></table></figure><blockquote><p>打不开后的修复方案：<a href="https://www.cnblogs.com/cirry/p/15064441.html">https://www.cnblogs.com/cirry/p/15064441.html</a></p></blockquote><h4 id="坚果云">坚果云</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S nutstore-experimental<br></code></pre></td></tr></table></figure><h4 id="obsidian">obsidian</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S obsidian<br></code></pre></td></tr></table></figure><h4 id="zotero">zotero</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S  zotero<br></code></pre></td></tr></table></figure><p>使用坚果云同步</p><h4 id="fsearch">fsearch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -s fsearch<br></code></pre></td></tr></table></figure><h4 id="向日葵远程控制">向日葵远程控制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S sunloginclient<br><br>sudo systemctl start runsunloginclient.service<br></code></pre></td></tr></table></figure><h4 id="深度截图">深度截图</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S deepin-screenshot<br></code></pre></td></tr></table></figure><h4 id="网易云">网易云</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S  yesplaymusic<br></code></pre></td></tr></table></figure><h4 id="腾讯会议">腾讯会议</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">paru -S wemeet<br></code></pre></td></tr></table></figure><h4 id="qq">qq</h4><p>官方有最新基于electron的 <a href="https://im.qq.com/linuxqq/index.shtml">QQ Linux版-新不止步·乐不设限</a></p><h4 id="微信">微信</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S deepin-wine-wechat<br> <span class="hljs-comment"># 清除下载缓存</span><br></code></pre></td></tr></table></figure><h4 id="KeepassXC">KeepassXC</h4><blockquote><p>官网下载appimage。系统自带的第三方软件。keepass客户端无法显示中文，故使用第三方。</p></blockquote><h4 id="obs-stuido">obs-stuido</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman  -S obs-studio</span><br></code></pre></td></tr></table></figure><h4 id="mailspring">mailspring</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S mailspring<br><br>sudo pacman -S gnome-keyring <span class="hljs-comment"># fix keyring error</span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/Foundry376/Mailspring/issues/511">mailspring keyring error</a></p><h4 id="VMware">VMware</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ paru -S vmware-workstation        <span class="hljs-comment"># 安装最新版本的vmware-workstation</span><br>$ sudo pacman  -S linux-headers    <span class="hljs-comment"># 安装系统对应的linux-headers</span><br></code></pre></td></tr></table></figure><p>否则载入用户组报错: modprobe: WARNING: Module vmmon not found in directory /lib/modules/5.9.16-1-MANJARO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo modprobe -a vmw_vmci vmmon  <span class="hljs-comment"># 载入vmmon模块</span><br></code></pre></td></tr></table></figure><p>否则启动系统时报错: could not open /dev/vmmon please make sure that the kernel moduel vmmon is load</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl <span class="hljs-built_in">enable</span> vmware-networks.service  <span class="hljs-comment"># 自启动网络服务</span><br>$ sudo systemctl start  vmware-networks.service  <span class="hljs-comment"># 开启网络服务</span><br><br></code></pre></td></tr></table></figure><p>否则虚拟机无法连接网络。</p><h3 id="其他">其他</h3><h4 id="开机无法进入系统">开机无法进入系统</h4><p>开机按住shift，在引导界面，按E进入grub编辑模式，在<code>rw</code>后面加</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">init</span><span class="hljs-operator">=/</span>bin/bash<br></code></pre></td></tr></table></figure><p>此时按<code>Ctrl+X </code>进入单root用户模式。然后进入命令行模式的系统做相应的修复。</p><h4 id="显示农历">显示农历</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S ccal<br><br>ccal -u<br></code></pre></td></tr></table></figure><h4 id="垃圾清理">垃圾清理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除下载缓存</span><br>$ sudo pacman -Scc  <br><span class="hljs-comment">#清除无用的软件包</span><br>$ sudo pacman -R $(pacman -Qdtq) <br></code></pre></td></tr></table></figure><h4 id="透明状态栏">透明状态栏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ paru -S ocs-url<br></code></pre></td></tr></table></figure><p>先安装<code>ocs-url</code>，然后导入<a href="https://store.kde.org/p/1338479/">Panel Transparency Button - KDE Store</a></p><h4 id="性能模式">性能模式</h4><p>查询状态</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat <span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/system/</span>cpu<span class="hljs-regexp">/cpu0/</span>cpufreq/scaling_governor<br>schedutil<br></code></pre></td></tr></table></figure><p>设置性能模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo cpupower -c all frequency-set -g performance</span><br></code></pre></td></tr></table></figure><h4 id="整系统备份">整系统备份</h4><p><a href="https://wiki.archlinux.org/title/Rsync#Full_system_backup">rsync - ArchWiki</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ rsync -aAXHv --exclude=&#123;<span class="hljs-string">&quot;/dev/*&quot;</span>,<span class="hljs-string">&quot;/proc/*&quot;</span>,<span class="hljs-string">&quot;/sys/*&quot;</span>,<span class="hljs-string">&quot;/tmp/*&quot;</span>,<span class="hljs-string">&quot;/run/*&quot;</span>,<span class="hljs-string">&quot;/mnt/*&quot;</span>,<span class="hljs-string">&quot;/media/*&quot;</span>,<span class="hljs-string">&quot;/lost+found&quot;</span>&#125; / _/path/to/backup_<br></code></pre></td></tr></table></figure><h4 id="改善字体渲染">改善字体渲染</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S wqy-zenhei  <br>yay -S wqy-bitmapfont<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/343934880">manjaro-kde改善字体渲染效果最简单方法 - 知乎</a> 的评论区</p><h4 id="deepin-wine-wechat中无法切换中文输入法">deepin-wine-wechat中无法切换中文输入法</h4><p>在<code>/opt/deepinwine/apps/Deepin-WeChat/run.sh</code>添加以下内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">GTK_IM_MODULE</span>=<span class="hljs-string">&quot;fcitx&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QT_IM_MODULE</span>=<span class="hljs-string">&quot;fcitx&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">XMODIFIERS</span>=<span class="hljs-string">&quot;@im=fcitx&quot;</span><br></code></pre></td></tr></table></figure><p>然后可正常输入。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Julia 入门指南</title>
    <link href="/2022/01/28/julia-introduction/"/>
    <url>/2022/01/28/julia-introduction/</url>
    
    <content type="html"><![CDATA[<h2 id="Julia是什么？">Julia是什么？</h2><p>Julia是一门新兴的高性能科学计算语言。Julia拥有Python般简单的语法，又有着C般的计算速度。</p><h2 id="Julia安装">Julia安装</h2><p>首先，下载Julia二进制环境，地址为  <a href="https://mirrors.tuna.tsinghua.edu.cn/help/julia-releases/">Julia 二进制安装程序</a></p><p>然后，配置系统环境变量<code>JULIA_PKG_SERVER</code>将General列表更换为国内镜像。以Windows平台为例，配置环境变量的方法为（右键）我的电脑 --&gt; 属性 --&gt; 高级系统设置 --&gt; 环境变量。然后在用户变量或者系统变量栏下 <code>新建</code> 来添加<code>JULIA_PKG_SERVER</code> 即可</p><p>这里还介绍一种针对 Julia 的全平台通用的方式：<code>$JULIA_DEPOT_PATH/config/startup.jl</code> (Linux 默认为 <code>~/.julia/config/startup.jl</code>，Windows默认为<code>C:/user/YourDesktopName/.julia/config/startup.jl</code>) 文件定义了每次启动 Julia 时都会执行的命令，编辑该文件，添加以下内容即可：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># ~/.julia/config/startup.jl</span><br><span class="hljs-keyword">ENV</span>[<span class="hljs-string">&quot;JULIA_PKG_SERVER&quot;</span>] = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/julia&quot;</span><br></code></pre></td></tr></table></figure><p>更多平台的配置方法可参考<a href="https://mirror.tuna.tsinghua.edu.cn/help/julia">Julia 镜像使用帮助</a> 。</p><p>终端启动julia，通过<code>versioninfo()</code>查询镜像、版本等信息。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">julia</span>&gt; versioninfo()<br><span class="hljs-attribute">Julia</span> Version <span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Commit</span> <span class="hljs-number">381693</span>d3df* (<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">14</span> <span class="hljs-number">17</span>:<span class="hljs-number">20</span> UTC)<br><span class="hljs-attribute">Platform</span> Info:<br>  <span class="hljs-attribute">OS</span>: Linux (x86_64-pc-linux-gnu)<br>  <span class="hljs-attribute">CPU</span>: Intel(R) Core(TM) i7-<span class="hljs-number">6800</span>K CPU @ <span class="hljs-number">3</span>.<span class="hljs-number">40</span>GHz<br>  <span class="hljs-attribute">WORD_SIZE</span>: <span class="hljs-number">64</span><br>  <span class="hljs-attribute">LIBM</span>: libopenlibm<br>  <span class="hljs-attribute">LLVM</span>: libLLVM-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> (ORCJIT, broadwell)<br><span class="hljs-attribute">Environment</span>:<br>  <span class="hljs-attribute">JULIA_PKG_SERVER</span> = https://mirrors.ustc.edu.cn/julia<br></code></pre></td></tr></table></figure><h2 id="Julia开发环境配置">Julia开发环境配置</h2><p>推荐配置：Julia + VS Code ，VS Code插件添加Julia，然后就可以愉快地写Julia代码了。配置好后，可以根据中的学习资料先学习语法基础和研究Julia进阶。</p><blockquote><p>顺便提一下，Windows 平台终端推荐使用Windows Terminal， 可在Github下载安装包。</p></blockquote><h2 id="Julia学习资料">Julia学习资料</h2><ol><li><p><a href="https://cn.julialang.org/JuliaZH.jl/latest/index.html">Julia中文文档 </a><br>这是Julia中文社区维护的中文文档，也是学习Julia的绝佳资料。推荐有有一定基础的同学直接通读文档手册部分。</p></li><li><p><a href="https://www.math.pku.edu.cn/teachers/lidf/docs/Julia/JuliaIntro.html">Julia语言入门 - 李东风</a><br><a href="https://www.math.pku.edu.cn/teachers/lidf/">李东风老师的主页</a>上还有一些其他关于统计计算的资料，推荐感兴趣的同学阅读。里面</p></li><li><p><a href="https://discourse.juliacn.com/t/topic/159">Julia 语言入门指引 - Julia中文社区 </a><br>Julia中文社区出品的入门指引。包含诸多常见安装等问题。</p></li><li><p>Julia入门系列之一起读文档</p><ol><li><a href="https://www.bilibili.com/video/BV18B4y1c7Aa">Julia入门系列之一起读文档（1）：变量、整数与浮点数、数学运算与基本函数、广播及其规则</a></li><li><a href="https://www.bilibili.com/video/BV1G84y1c7fs">Julia入门系列之一起读文档 (2)：字符串、函数、控制流</a></li><li><a href="https://www.bilibili.com/video/BV17B4y1w7gM">Julia入门系列之一起读文档 (3)：类型、多重派发、结构体</a></li><li><a href="https://www.bilibili.com/video/BV1Nb4y1f79X">Julia入门系列之一起读文档 (4)：性能建议、异步、多线程</a></li><li><a href="https://www.bilibili.com/video/BV1p64y1C7Pa">Julia入门系列之一起读文档 (5)：实战Julia包的目录结构、文档与测试、迭代器与矩阵接口</a></li></ol></li></ol><p>这是社区Johnny Chen同学录制的视频教程。</p><h2 id="参考资料">参考资料</h2><ol><li><p><a href="https://discourse.juliacn.com/t/topic/2969">Julia PkgServer 镜像服务及镜像站索引 - 综合讨论区 / 库的安装及使用 - Julia中文社区 (juliacn.com)</a></p></li><li><p><a href="https://help.mirrors.cernet.edu.cn/julia/">Julia 软件仓库镜像使用帮助 - MirrorZ Help (cernet.edu.cn)</a></p></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Julia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简明Fortran教程</title>
    <link href="/2021/08/15/fortran-introduction/"/>
    <url>/2021/08/15/fortran-introduction/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是一本简明的Fortran教程，其中包含了常见的Fortran 语法。具有C语言基础会使学习更加容易。</p></blockquote><h2 id="关于Fortran">关于Fortran</h2><p>Fortran是一门编译型编程语言，即将源代码编译链接成可执行程序，再去执行。Fortan最大的特点是快。</p><p>Fortran有两种格式，固定格式和自由格式。固定格式需要在行首输入特定的字符进行标识，并且每一行的长度有限制。而自由格式不需要在行首进行标识。</p><p>虽然现在编译器仍然支持固定格式，但推荐使用自由格式。</p><h2 id="安装">安装</h2><p>建议新手使用带gfortran编译器的Code::Blocks，上手简单。</p><h2 id="基础">基础</h2><h3 id="字符集">字符集</h3><table><thead><tr><th>符号数量</th><th>类型</th><th>值</th></tr></thead><tbody><tr><td>26</td><td>大写字母</td><td>A-Z</td></tr><tr><td>26</td><td>小写字母</td><td>a-z</td></tr><tr><td>10</td><td>数字</td><td>0-9</td></tr><tr><td>1</td><td>下划线</td><td></td></tr><tr><td>5</td><td>运算符</td><td>+  - *   /    **</td></tr><tr><td>28</td><td>其他符号</td><td>(  )  .  =  ,  ’  $  :  !  &quot;  %  &amp;  ;  &lt;  &gt;  ?  ~  \  [  ]  `  ^  { }</td></tr></tbody></table><h3 id="程序结构">程序结构</h3><p>一个自由格式的程序示例如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-function"><span class="hljs-keyword">PROGRAM</span></span> my_first_program<br><span class="hljs-comment">! Purpose:</span><br><span class="hljs-comment">! To illustrate some of the basic features of a Fortran program.</span><br><span class="hljs-comment">!</span><br><span class="hljs-comment">! Declare the variables used in this program.</span><br><span class="hljs-keyword">INTEGER</span> :: i, j, k <span class="hljs-comment">! All variables are integers</span><br><br><span class="hljs-comment">! Get two values to store in variables i and j</span><br><span class="hljs-built_in">WRITE</span> (*,*) <span class="hljs-string">&#x27;Enter the numbers to multiply: &#x27;</span><br>READ (*,*) i, j<br><br><span class="hljs-comment">! Multiply the numbers together</span><br>k = i * j<br><br><span class="hljs-comment">! Write out the result.</span><br><span class="hljs-built_in">WRITE</span> (*,*) <span class="hljs-string">&#x27;Result = &#x27;</span>, k<br><span class="hljs-comment">! Finish up.</span><br><span class="hljs-keyword">STOP</span><br><span class="hljs-keyword">END</span> <span class="hljs-function"><span class="hljs-keyword">PROGRAM</span></span> my_first_program<br></code></pre></td></tr></table></figure><p>这个Fortran程序，就像所有的Fortan程序那样被分成了三段：</p><ol><li><p>声明段。此部分由一组不可执行的语句组成，这些语句定义程序的名称和</p><p>程序中引用的变量的数量和类型以及一些编译选项。</p></li><li><p>执行段。此部分由一组可执行的语句组成，这些语句被用来执行特定的任务。</p></li><li><p>结构段。此部分由一个或多个语句组成，该语句停止程序的执行，并告诉编译器程序执行完毕。</p></li></ol><h3 id="数据类型">数据类型</h3><p>Fortran是<strong>强变量类型</strong>的语言。</p><ul><li>变量类型必须在编译时确定，并且不允许改变。</li><li>建议显式声明所有变量。</li><li>如果未显式声明变量，则按照 IN 规则确定类型（ijklmn开头为整型，其他为实型）</li><li>IN 规则是个很讨厌的东西，因此，我们建议在每一个程序单元，使用 Implicit None</li><li>变量有不同的类型，主要有整型（Integer）、实型（Real）、字符型（Character），还有 Complex 类型（本质上是real）、派生（type）类型（是其他类型的集合）</li><li>整型无误差、实型有误差。字符型是接近人类的语言</li></ul><p>Fortran 标准数据类型：</p><table><thead><tr><th>变量</th><th>数据类型</th></tr></thead><tbody><tr><td>Integer(Kind=??) ::</td><td>整型</td></tr><tr><td>Real(Kind= ?? ) ::</td><td>实型 / 浮点型</td></tr><tr><td>Complex(Kind=??) ::</td><td>复数型（两个实型的组合）</td></tr><tr><td>Character(Kind=1,len=??) ::</td><td>字符型</td></tr><tr><td>Logical(Kind=??) ::</td><td>逻辑型 / 布尔型</td></tr><tr><td>Type( ?? ) ::</td><td>派生类型（上述类型的组合）</td></tr></tbody></table><h4 id="Kind">Kind</h4><p>数据的Kind属性用以区分不同长度、精度或编码方式的同一种数据类型。Kind 受编译器的影响，具体数值可能会有差异。Kind 对不同的变量类型，表达的意思也不相同。</p><ul><li>对 Integer ，Kind 值影响整数能表达的最大范围；</li><li>对 Real 和 Complex， Kind 值影响实数的最大范围和最小精度；</li><li>对 Character ，Kind 值表示编码。通常为 ASCII 编码；</li><li>对 Logical ， Kind 值表示长度，对逻辑型无影响。</li></ul><h4 id="整型（Integer）">整型（Integer）</h4><p>Integer 的 Kind，常见 1、2、4、8 等。</p><table><thead><tr><th>Kind</th><th>类型</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>1</td><td>超短整型</td><td>-(2^7)   -128</td><td>2^7  -1  127</td></tr><tr><td>2</td><td>短整型</td><td>-(2^15)  -32768</td><td>2^15-1  32767</td></tr><tr><td>4</td><td>整型  长整型</td><td>-(2^31)  -2147483648</td><td>2^31-1  2147483647</td></tr><tr><td>8</td><td>超长整型</td><td>-(2^63)  -9223372036854775808</td><td>2^63-1  9223372036854775807</td></tr></tbody></table><p>对于大多数编译器，Kind 默认是 4，占有 4 个字节。但大多数编译器也允许调整默认Kind值。</p><p>并不是所有编译器都允许1、2、4、8的Kind值。某些编译器不支持Kind=8， Kind=1 ，而某些编译器用1、2、3、4 表示。</p><blockquote><p>TODO：gfortran实验</p></blockquote><p>可以用 k = Selected_Int_Kind( i ) 函数来选择能满足要求的Kind。 i 表示需要最大的十进制位数，k 表示返回的能满足范围的最小的Kind值。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><br><br><span class="hljs-function"><span class="hljs-keyword">Program</span></span> www_fcode_cn<br><span class="hljs-keyword">Implicit</span> <span class="hljs-keyword">None</span><br><span class="hljs-keyword">Integer</span> , <span class="hljs-keyword">parameter</span> :: KI = <span class="hljs-built_in">Selected_Int_Kind</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">Integer</span>(<span class="hljs-keyword">Kind</span>=KI) :: i=<span class="hljs-number">0</span>, j, k<br><span class="hljs-built_in">write</span>(*, *) <span class="hljs-keyword">kind</span>(i) , i<br><span class="hljs-built_in">write</span>(*, *) <span class="hljs-built_in">huge</span>(i)<br>i = i + <span class="hljs-number">100_KI</span><br><span class="hljs-built_in">write</span>(*,*) i<br><br><span class="hljs-keyword">End</span> <span class="hljs-function"><span class="hljs-keyword">Program</span></span> www_fcode_cn<br></code></pre></td></tr></table></figure><p>整型和整型的计算结果依然是整型！</p><p>例如 1/2 = 0 ； 3/2 = 1</p><p>但整数和浮点数的计算结果一般是浮点数，例如 1/2.0 =0.5 。</p><h4 id="实型-浮点型（Real）">实型/浮点型（Real）</h4><p>Real 的 Kind，常见 4、8、16 等。</p><table><thead><tr><th>Kind</th><th>类型</th><th>最大值</th><th>最小值</th></tr></thead><tbody><tr><td>4</td><td>实型</td><td>3.4028235E+38</td><td>1.1754944E-38</td></tr><tr><td>8</td><td>双精度</td><td>1.7976931E+308</td><td>2.2250738E-308</td></tr><tr><td>16</td><td>四精度</td><td>1.1897314E+4932</td><td>3.3621031E-4932</td></tr></tbody></table><p>对于大多数编译器，Kind 默认是 4，占有 4 个字节。但大多数编译器也允许调整默认Kind值。</p><p>并不是所有编译器都允许4、8、16的Kind值。某些编译器不支持Kind=16 ，而某些编译器用1、2、3 表示。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">k = <span class="hljs-constructor">Selected_Real_Kind( <span class="hljs-params">r</span> , <span class="hljs-params">p</span> )</span> <br></code></pre></td></tr></table></figure><p>可以用这个函数来选择能满足要求的Kind。r 表示需要最大的十进制位数 , p 表示最小的有效位数。k 表示返回的能满足范围的最小的Kind值。</p><p>由于浮点数存在误差，因此我们应该尽量避免以下操作：</p><ol><li><p>对浮点数进行相等判断！</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">if</span> ( a == <span class="hljs-number">1.3</span> ) =&gt; <span class="hljs-keyword">if</span>( <span class="hljs-built_in">abs</span>(a-<span class="hljs-number">1.3</span>)&lt;<span class="hljs-number">1.0e-5</span> )<br></code></pre></td></tr></table></figure></li><li><p>用浮点数做为数组角标！</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">b = a(<span class="hljs-number">2.0</span>) =&gt; b = a(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p>用浮点数做为循环变量！</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Do</span> r = <span class="hljs-number">0.0</span> , <span class="hljs-number">2.0</span> , <span class="hljs-number">0.1</span> =&gt;   <span class="hljs-keyword">Do</span> i = <span class="hljs-number">0</span> , <span class="hljs-number">20</span><br> r = i / <span class="hljs-number">10.0</span><br></code></pre></td></tr></table></figure></li></ol><p>在数值计算中，我们应避免误差的放大和积累，因此设计合理、健壮的算法尤为重要。</p><h4 id="复数型（Complex-）">复数型（Complex ）</h4><p>Complex 的数据类型与 Real 一致。</p><p>但需要注意的是：</p><p>如果 Kind=8 的 Real 占用 8 字节，则 Kind=8 的 Complex 占有 16 字节。</p><p>若使用 Complex(Kind=16) 来定义双精度，但实际上已经是四精度。</p><p>Complex 选择Kind，也使用 Selected_Real_Kind 函数。</p><h4 id="字符型（Character-）">字符型（Character ）</h4><p>Character 的 Kind，常见只有一种，即 1 表示 ASCII 编码。</p><p>也可以使用 Selected_Char_Kind 来选择。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">k</span> = Selected_Char_Kind( <span class="hljs-string">&#x27;ASCII&#x27;</span> )<br></code></pre></td></tr></table></figure><p>字符串定义时必须有长度，且通常是固定的。</p><p>Fortran的字符串没有结束符 \0，所以在字符串操作中，必须注意！</p><p>有必要时需实用 trim 去除尾部空格。</p><p>可通过内部文件在字符串和整型、实型间相互转化。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(字符串S , *)</span></span>   整型或实型变量I  !  字符串-&gt;数字<br><br><span class="hljs-function"><span class="hljs-title">write</span><span class="hljs-params">(字符串S , *)</span></span>  整型或实型变量I  !  数字-&gt;字符串<br></code></pre></td></tr></table></figure><p>字符型允许使用“子字符串”进行索引切片。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><span class="hljs-function"><span class="hljs-title">character</span><span class="hljs-params">(len=<span class="hljs-number">12</span>)</span></span> :: c = <span class="hljs-string">&quot;www.fcode.cn&quot;</span><br><span class="hljs-function"><span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">5</span>:<span class="hljs-number">9</span>)</span></span> = <span class="hljs-string">&quot;fcode&quot;</span>!<span class="hljs-comment">// 此时 c=&quot;www.fcode.cn&quot;</span><br><span class="hljs-function"><span class="hljs-title">c</span><span class="hljs-params">(:<span class="hljs-number">3</span>)</span></span>  = <span class="hljs-string">&quot;bbs&quot;</span>!<span class="hljs-comment">// 此时 c=&quot;bbs.fcode.cn&quot;</span><br><span class="hljs-function"><span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">10</span>:)</span></span> = <span class="hljs-string">&quot;&quot;</span>!<span class="hljs-comment">// 此时 c=&quot;bbs.fcode___&quot;</span><br><br></code></pre></td></tr></table></figure><p>灵活运用子字符串可以让很多事情事半功倍。</p><h4 id="逻辑型（Logical）">逻辑型（Logical）</h4><p>Logical 的 Kind，通常与该编译器支持的 Integer 一致。</p><h3 id="变量声明">变量声明</h3><p>Fortran数据除了有类型之外，还有一定的属性，比如Kind。他们用定义时的形容词来赋予。</p><p>Fortran变量名必须以字母开头，且不能太长。</p><p>Fortran声明变量的基本格式：</p><blockquote><p>类型( 属性 ) , 形容词 , 形容词 … :: 变量名（数组外形）= 值 , 变量名2（数组外形）= 值</p></blockquote><p>下面是一些例子：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Fortran"><span class="hljs-keyword">Real</span>(<span class="hljs-keyword">Kind</span>=<span class="hljs-number">8</span>) , <span class="hljs-keyword">parameter</span> , <span class="hljs-keyword">private</span> :: rVar = <span class="hljs-number">20.0d0</span><br><br><span class="hljs-keyword">Character</span>(Len=<span class="hljs-number">32</span>) , <span class="hljs-keyword">Intent</span>( <span class="hljs-keyword">IN</span> ) :: cStr(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>)<br><br><span class="hljs-keyword">Integer</span> , <span class="hljs-keyword">save</span> :: n = <span class="hljs-number">30</span> , m = <span class="hljs-number">40</span><br><br><span class="hljs-keyword">Integer</span> m<br></code></pre></td></tr></table></figure><h2 id="运算符与表达式">运算符与表达式</h2><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">乘方</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>在写复合表达式时，应注意运算符的优先级。</p><h3 id="关系运算符">关系运算符</h3><p><img src="https://picutre999.oss-cn-hangzhou.aliyuncs.com/img/20210812212847.png" alt="关系运算符对照表（来源：中科大网站）"></p><h3 id="逻辑运算符">逻辑运算符</h3><p><img src="https://picutre999.oss-cn-hangzhou.aliyuncs.com/img/20210812212946.png" alt="逻辑运算符对照表（来源：中科大网站）"></p><h2 id="输入与输出">输入与输出</h2><h3 id="Write">Write()</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">Write</span>(*,*) <span class="hljs-string">&quot;Hello World! &quot;</span><br></code></pre></td></tr></table></figure><p><code>Write(*, *)</code>中第一个星号代表使用默认输出位置，即屏幕，第二个星号代表不特别设置输出格式。</p><h3 id="格式化输入输出">格式化输入输出</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">write</span>(*,<span class="hljs-string">&#x27;(1i5)&#x27;</span>) <span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h2 id="控制流">控制流</h2><h3 id="条件分支">条件分支</h3><h4 id="IF语句">IF语句</h4><p>IF语句常见的简单结构：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">IF</span> (Expression) <span class="hljs-keyword">THEN</span><br>...<br>...<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">IF</span> (ConditionA) <span class="hljs-keyword">THEN</span><br>...<br><span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">IF</span> (ConditionB) <span class="hljs-keyword">THEN</span><br>...<br><span class="hljs-keyword">ELSE</span><br>...<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span><br></code></pre></td></tr></table></figure><ul><li>IF结构中的逻辑表达式的结果必须是一个单值，不能是数组。</li><li>数组比较ANY, ALL等函数转换</li></ul><h4 id="SELECT-CASE语句">SELECT CASE语句</h4><p>SELECT CASE语句的结构：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> (keywd)<br><span class="hljs-keyword">CASE</span>(A)<br>...<br><span class="hljs-keyword">CASE</span>(B)<br>...<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">DEFAULT</span><br>...<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">SELECT</span><br></code></pre></td></tr></table></figure><p>一般情况下，SELECT CASE语句可以与IF语句进行等价转换。</p><h3 id="循环">循环</h3><h4 id="DO循环">DO循环</h4><p>DO循环语句的结构如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">DO</span> i=<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>, step<br>...<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">DO</span><br></code></pre></td></tr></table></figure><h4 id="DO-WHILE循环">DO WHILE循环</h4><p>DO WHILE循环语句的结构如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">DO</span> <span class="hljs-keyword">WHILE</span> (Expression)<br>...<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">DO</span><br></code></pre></td></tr></table></figure><h4 id="循环控制">循环控制</h4><ul><li>CYCLE：忽略本轮循环剩余内容，直接进入下一轮循环。</li><li>EXIT： （用于循环时）忽略循环剩余内容，跳出（指定）循环。</li></ul><h2 id="数组">数组</h2><h3 id="数组的基本使用">数组的基本使用</h3><h4 id="数组的定义">数组的定义</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Integer</span> :: a(<span class="hljs-number">10</span>) <span class="hljs-comment">! 定义1*10的数组</span><br><span class="hljs-keyword">Integer</span> :: a(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>) <span class="hljs-comment">! 定义10*10的数组</span><br><span class="hljs-keyword">Integer</span> :: a(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>) <span class="hljs-comment">! 定义10*10的数组</span><br></code></pre></td></tr></table></figure><h3 id="数组的操作">数组的操作</h3><p>数组的索引从1开始。</p><h4 id="赋初值">赋初值</h4><h4 id="Data赋值">Data赋值</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Integer</span> :: a(<span class="hljs-number">5</span>) <span class="hljs-comment">! 定义1*5的数组</span><br><span class="hljs-keyword">Data</span> a /<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>/ <span class="hljs-comment">! 依次赋值</span><br><span class="hljs-keyword">Data</span> a /<span class="hljs-number">3</span>*<span class="hljs-number">5</span>/ <span class="hljs-comment">! 表示这里有5个3</span><br></code></pre></td></tr></table></figure><h5 id="隐式循环">隐式循环</h5><p>一个隐式循环的例子如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Integer</span> :: a(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">Integer</span> :: i<br>...<br>a = [(i,i=<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)]<br></code></pre></td></tr></table></figure><h4 id="对整个矩阵的操作">对整个矩阵的操作</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-comment">!a,b,c是三个相同大小的矩阵。b和c相同位置的相加，再赋值给a中的相同位置。-，*，/操作类似。</span><br>a = b+c  <br><br><span class="hljs-comment">! 求矩阵中每一个元素的sin值。</span><br>a = <span class="hljs-built_in">sin</span>(b)<br></code></pre></td></tr></table></figure><h4 id="索引切片">索引切片</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-comment">!a(3),a(4),a(5)设置成5</span><br>a(<span class="hljs-number">3</span>:<span class="hljs-number">5</span>)=<span class="hljs-number">5</span><br><br><span class="hljs-comment">!a(3)=3,a(4)=4,a(5)=5</span><br>a(<span class="hljs-number">3</span>:<span class="hljs-number">5</span>)=(/<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)/<br></code></pre></td></tr></table></figure><h5 id="where">where</h5><h5 id="forall">forall</h5><h4 id="可变大小的数组">可变大小的数组</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-comment">!声明一个可变大小的数组</span><br><span class="hljs-keyword">Integer</span>,<span class="hljs-keyword">allocatable</span> :: a(:)<br><br><span class="hljs-built_in">write</span>(*, *) <span class="hljs-string">&quot;How many students:&quot;</span><br>read(*, *) students<br><span class="hljs-keyword">allocatable</span>(a(students)) <span class="hljs-comment">!给数组分配空间</span><br></code></pre></td></tr></table></figure><h2 id="函数与子程序">函数与子程序</h2><h3 id="子程序（subroutine）">子程序（subroutine）</h3><p>子程序拥有独立的变量声明。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-function"><span class="hljs-keyword">program</span></span> subroutine_ex1<br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br><span class="hljs-keyword">call</span> sub1()<br><span class="hljs-keyword">call</span> sub2()<br><span class="hljs-keyword">stop</span><br><span class="hljs-keyword">end</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span> subroutine_ex1<br><br><span class="hljs-function"><span class="hljs-keyword">subroutine</span></span> sub1()<br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br><span class="hljs-built_in">write</span>(*,*) <span class="hljs-string">&quot;This is sub1&quot;</span><br><span class="hljs-keyword">call</span> sub2()<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span> <span class="hljs-function"><span class="hljs-keyword">subroutine</span></span> sub1<br><br><span class="hljs-function"><span class="hljs-keyword">subroutine</span></span> sub2()<br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br><span class="hljs-built_in">write</span>(*,*) <span class="hljs-string">&quot;This is sub2&quot;</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span> <span class="hljs-function"><span class="hljs-keyword">subroutine</span></span> sub2<br></code></pre></td></tr></table></figure><h3 id="函数（function）">函数（function）</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-function"><span class="hljs-keyword">program</span></span> function_ex1<br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br><span class="hljs-keyword">real</span> :: a=<span class="hljs-number">1</span><br><span class="hljs-keyword">real</span> :: b=<span class="hljs-number">2</span><br><span class="hljs-keyword">real</span>,<span class="hljs-keyword">external</span> :: add <span class="hljs-comment">! 声明add是个函数而不是变量</span><br><span class="hljs-comment">!调用函数add，不必使用call命令</span><br><span class="hljs-built_in">write</span>(*,*) add(a,b)<br><span class="hljs-keyword">stop</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">real</span> <span class="hljs-function"><span class="hljs-keyword">function</span></span> add(a,b)<br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br><span class="hljs-keyword">real</span> :: a,b<br><span class="hljs-comment">! 这里是在声明函数会返回的数值类型</span><br><span class="hljs-comment">! real :: add</span><br><br>add = a + b<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="匿名函数">匿名函数</h4><p>写法简单，但只能在本程序内使用。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-function"><span class="hljs-keyword">program</span></span> function_ex2<br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br><span class="hljs-keyword">real</span> :: a=<span class="hljs-number">1</span><br><span class="hljs-keyword">real</span> :: b=<span class="hljs-number">2</span><br><span class="hljs-keyword">real</span> add <br>add(a,b)= a+b<br><span class="hljs-built_in">write</span>(*,*) add(a,b)<br><span class="hljs-keyword">stop</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="文件操作">文件操作</h2><p>实例：写入矩阵到txt</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Fortran"><span class="hljs-keyword">real</span> :: a(n,m)<br>a = <span class="hljs-number">1.</span><br>open(<span class="hljs-number">111</span>, <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;example.txt&quot;</span>)<br><span class="hljs-keyword">do</span> i= <span class="hljs-number">1</span>, n<br>  <span class="hljs-keyword">do</span> j=<span class="hljs-number">1</span>, m<br>    <span class="hljs-comment">! 写入矩阵</span><br>    <span class="hljs-built_in">write</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;(1F20.5)&#x27;</span>,<span class="hljs-keyword">advance</span>=<span class="hljs-string">&#x27;no&#x27;</span>) a(i,j)<br>  <span class="hljs-keyword">end</span> <span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">write</span>(*,*) <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><h2 id="标准数学函数">标准数学函数</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Fortran"><span class="hljs-built_in">exp</span>()  <span class="hljs-built_in">sqrt</span>() <span class="hljs-built_in">sin</span>() <span class="hljs-built_in">cos</span>() <span class="hljs-built_in">tan</span>() ...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Fortran</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【译】Python 标准库教程——random 模块</title>
    <link href="/2020/02/15/python-random/"/>
    <url>/2020/02/15/python-random/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文翻译自 Doug Hellmann 的 PyMOTW-3项目的random模块。</p><p>原文链接：<a href="https://pymotw.com/3/random/index.html">https://pymotw.com/3/random/index.html</a></p><p>本文使用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">cc-by-nc-sa 4.0</a>协议共享。</p></blockquote><h2 id="random—伪随机数生成器">random—伪随机数生成器</h2><p><code>random</code>模块提供了基于<em>Mersenne Twister</em>算法的快速伪随机数生成器。起初开发它是为了产生蒙特卡洛模拟的输入，<em>Mersenne Twister</em>生成的数近乎均匀分布并且周期大，使其适合更加广泛的应用。</p><h3 id="生成随机数">生成随机数</h3><p><code>random</code>函数从生成序列中返回下一个随机浮点数。所有返回值都包含在0 &lt;= n &lt; 1.0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_random.py</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%04.3f&#x27;</span> % random.random(), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>重复运行程序以获得不同的值序列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_random.py</span><br><br>0.859 0.297 0.554 0.985 0.452<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_random.py</span><br><br>0.797 0.658 0.170 0.297 0.593<br></code></pre></td></tr></table></figure><p>为获得特定范围的数，使用<code>uniform()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_uniform.py</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(random.uniform(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()jiang<br></code></pre></td></tr></table></figure><p>传递最大值和最小值， 然后<code>uniform()</code>使用公式<code>min + (max - min) * random()</code>调整<code>random()</code>的返回值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_uniform.py</span><br><br>12.428 93.766 95.359 39.649 88.983<br></code></pre></td></tr></table></figure><h3 id="种子">种子</h3><p><code>random()</code>在每次调用时产生不同的值，在重复任何值前有相当大的周期。这对产生唯一的值或变量很有用，有时也对以不同的方式处理相同的数据集很有用。一种技术是使用程序生成随机值，并保存随机值到独立的步骤中处理。但是，这对大型数据集来说不切实际，因此<code>random</code>提供了初始化伪随机数生成器的<code>seed()</code>函数，以生成一组预期的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_seed.py</span><br><br><span class="hljs-keyword">import</span> random<br><br>random.seed(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(random.random()), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>种子控制了伪随机数生成公式的第一个值，并当公式确定时也设置了种子改变后生成的完整序列。<code>seed()</code>的参数可以是任何hashable 对象。默认使用平台特定的随机资源，如果有的话。否则，使用当前时间。</p><h3 id="保存状态">保存状态</h3><p><code>random()</code>中使用的伪随机数算法的内部状态可以被保存下来，用以控制后续运行中生成的数字。在继续运行前保存先前的状态可减少从以前的输入重复值或值序列的可能性。<code>getstate()</code>返回的数据可用于稍后通过<code>setstate()</code>重新初始化随机数生成器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_state.py</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;state.dat&#x27;</span>):<br>    <span class="hljs-comment">#Restore the previously saved state</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Found state.dat, initializing random module&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;state.dat&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        state =pickle.load(f)<br>    random.setstate(state)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># Use a well-known start state</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No state.dat, seeding&#x27;</span>)<br>    random.seed(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#Produce random values</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(random.random()), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment">#Save state for next time</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;state.dat&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    pickle.dump(random.getstate(), f)<br><br><span class="hljs-comment">#Produce more ranodm values</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nAfter saving state:&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(random.random()), end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>getstate()</code>返回的数据是一个实现细节，因此本例中使用pickle将数据保存在文件中，在其他地方可看作黑箱。如果程序开始时文件存在，则加载旧状态继续运行。每次运行在保存态前后生成一些数字，可说明恢复状态导致生成器再次生成相同的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_state.py</span><br><br>No state.dat, seeding<br>0.134 0.847 0.764<br><br>After saving state:<br>0.255 0.495 0.449<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_state.py</span><br><br>Found state.dat, initializing random module<br>0.255 0.495 0.449<br><br>After saving state:<br>0.652 0.789 0.094<br></code></pre></td></tr></table></figure><h3 id="随机整数">随机整数</h3><p><code>random()</code>生成浮点数。虽然将浮点数转化整数是可行的，但是使用<code>randint()</code>直接生成整数更加便捷。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_randint.py</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[1, 100]:&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n[-5, 5]:&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(random.randint(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p><code>ranint()</code>的参数是值范围的闭区间。参数可以是正数或负数，但第一个值应该小于第二个值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_randint.py</span><br><br>[1, 100]: 98 75 34<br>[-5, 5]: 4 0 5<br></code></pre></td></tr></table></figure><p><code>randrange()</code>是从范围中选择值的更一般形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_randrange.py</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">5</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p><code>randrange()</code>除了支持start和stop参数，还支持step参数。因此它等效于从<code>range(start, stop, step)</code>中选择值。这更有效，因为范围不是实际构造的。</p><h3 id="随机挑选项目">随机挑选项目</h3><p>随机数生成器的一个常见用途是从枚举序列中随机挑选项目，尽管这些值可能不是数。 <code>random</code>提供了<code>choice()</code>函数来从序列中做随机挑选。此例模拟了抛硬币1000次，以计算正面朝上和反面朝上的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_choice.py</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> itertools<br><br>outcomes = &#123;<br>    <span class="hljs-string">&#x27;heads&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;tails&#x27;</span>: <span class="hljs-number">0</span>,<br>&#125;<br>sides = <span class="hljs-built_in">list</span>(outcomes.keys())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    outcomes[random.choice(sides)] += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Heads:&#x27;</span>, outcomes[<span class="hljs-string">&#x27;heads&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Tails:&#x27;</span>, outcomes[<span class="hljs-string">&#x27;tails&#x27;</span>])<br></code></pre></td></tr></table></figure><p>抛硬币有两种结果，因此不是使用数字，而是将他们转化为&quot;head&quot;和 &quot;tail&quot;再传递给<code>choice()</code>。使用结果名称作为键，将结果列在字典中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_choice.py</span><br><br>Heads: 5091<br>Tails: 4909<br></code></pre></td></tr></table></figure><h3 id="排列">排列</h3><p>扑克游戏模拟需要打乱牌堆，并将牌发给玩家，不能多次发同一张牌。使用<code>choice()</code>会导致同一张牌被发两次，因此，可以结合使用<code>shuffle()</code>在发牌后移走某张牌。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_shuffle.py</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> itertools<br><br>FACE_CARDS = (<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>)<br>SUITS = (<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new_deck</span>():<br>    <span class="hljs-keyword">return</span> [<br>        <span class="hljs-comment"># Always use 2 places for the value, so the strings</span><br>        <span class="hljs-comment"># are a consistent width.</span><br>        <span class="hljs-string">&#x27;&#123;:&gt;2&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(*c)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> itertools.product(<br>            itertools.chain(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>), FACE_CARDS),<br>            SUITS,<br>        )<br>    ]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_deck</span>(<span class="hljs-params">deck</span>):<br>    p_deck = deck[:]<br>    <span class="hljs-keyword">while</span> p_deck:<br>        row = p_deck[:<span class="hljs-number">13</span>]<br>        p_deck = p_deck[<span class="hljs-number">13</span>:]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> row:<br>            <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-comment"># Make a new deck, with the cards in order</span><br>deck = new_deck()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initial deck:&#x27;</span>)<br>show_deck(deck)<br><br><span class="hljs-comment"># Shuffle the deck to randomize the order</span><br>random.shuffle(deck)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nShuffled deck:&#x27;</span>)<br>show_deck(deck)<br><br><span class="hljs-comment"># Deal 4 hands of 5 cards each</span><br>hands = [[], [], [], []]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> hands:<br>        h.append(deck.pop())<br><br><span class="hljs-comment"># Show the hands</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nHands:&#x27;</span>)<br><span class="hljs-keyword">for</span> n, h <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(hands):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;:&#x27;</span>.<span class="hljs-built_in">format</span>(n + <span class="hljs-number">1</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> h:<br>        <span class="hljs-built_in">print</span>(c, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># Show the remaining deck</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nRemaining deck:&#x27;</span>)<br>show_deck(deck)<br></code></pre></td></tr></table></figure><p>纸牌用字符串表示，字符串的第一位为面值（2-11,J,Q,K,A），第二位指示花色。”发牌手“每次向四组list依次增加一张牌，然后从牌堆将其移除以使不能再发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_shuffle.py</span><br><br>Initial deck:<br> 2H  2D  2C  2S  3H  3D  3C  3S  4H  4D  4C  4S  5H<br> 5D  5C  5S  6H  6D  6C  6S  7H  7D  7C  7S  8H  8D<br> 8C  8S  9H  9D  9C  9S 10H 10D 10C 10S  JH  JD  JC<br> JS  QH  QD  QC  QS  KH  KD  KC  KS  AH  AD  AC  AS<br><br>Shuffled deck:<br> QD  8C  JD  2S  AC  2C  6S  6D  6C  7H  JC  QS  QC<br> KS  4D 10C  KH  5S  9C 10S  5C  7C  AS  6H  3C  9H<br> 4S  7S 10H  2D  8S  AH  9S  8H  QH  5D  5H  KD  8D<br>10D  4C  3S  3H  7D  AD  4H  9D  3D  2H  KC  JH  JS<br><br>Hands:<br>1:  JS  3D  7D 10D  5D<br>2:  JH  9D  3H  8D  QH<br>3:  KC  4H  3S  KD  8H<br>4:  2H  AD  4C  5H  9S<br><br>Remaining deck:<br> QD  8C  JD  2S  AC  2C  6S  6D  6C  7H  JC  QS  QC<br> KS  4D 10C  KH  5S  9C 10S  5C  7C  AS  6H  3C  9H<br> 4S  7S 10H  2D  8S  AH<br></code></pre></td></tr></table></figure><h3 id="抽样">抽样</h3><p>许多模拟都需要从输入值的总体随机抽样。<code>sample()</code>函数可在不产生重复值和不修改输入序列的情况下生成样本。下面的例子从系统辞典中打印单词的随机样本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_sample.py</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/usr/share/dict/words&#x27;</span>, <span class="hljs-string">&#x27;rt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    words = f.readlines()<br>words = [w.rstrip() <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> words]<br><br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> random.sample(words, <span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(w)<br></code></pre></td></tr></table></figure><p>生成结果集的算法考虑了输入的大小，以使尽可能快地生成样本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_sample.py</span><br><br>streamlet<br>impestation<br>violaquercitrin<br>mycetoid<br>plethoretical<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_sample.py</span><br><br>nonseditious<br>empyemic<br>ultrasonic<br>Kyurinish<br>amphide<br></code></pre></td></tr></table></figure><h3 id="多重独立生成器">多重独立生成器</h3><p>除了模块级函数，<code>random</code>提供了<code>Random</code>类来管理各随机数生成器的内部状态。前面描述的函数都可以看作<code>Random</code>实例的方法，每个实例可以独立的初始化和使用，并且不干扰其他实例返回的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_random_class.py</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Default initializiation:\n&#x27;</span>)<br><br>r1 = random.Random()<br>r2 = random.Random()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;  &#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r1.random(), r2.random()))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nSame seed:\n&#x27;</span>)<br><br>seed = time.time()<br>r1 = random.Random(seed)<br>r2 = random.Random(seed)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;  &#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r1.random(), r2.random()))<br></code></pre></td></tr></table></figure><p>当系统有良好的本地随机值种子时，实例从唯一状态出发。然而，如果平台不存在良好的随机值生成器，实例就会以当前时间为种子，因此会产生相同的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_random_class.py</span><br><br>Default initializiation:<br><br>0.862  0.390<br>0.833  0.624<br>0.252  0.080<br><br>Same seed:<br><br>0.466  0.466<br>0.682  0.682<br>0.407  0.407<br></code></pre></td></tr></table></figure><h3 id="系统随机">系统随机</h3><p>许多操作系统提供随机数生成器，它们可以访问更多可以被引入生成器的熵源。<code>random</code>通过<code>SystemRandom</code>类来获得这些特性，该类与<code>Random</code>拥有相同的API，但使用<code>os.urandom()</code>来生成构成其他算法基础的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_system_random.py</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Default initializiation:\n&#x27;</span>)<br><br>r1 = random.SystemRandom()<br>r2 = random.SystemRandom()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;  &#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r1.random(), r2.random()))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nSame seed:\n&#x27;</span>)<br><br>seed = time.time()<br>r1 = random.SystemRandom(seed)<br>r2 = random.SystemRandom(seed)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:04.3f&#125;  &#123;:04.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r1.random(), r2.random()))<br></code></pre></td></tr></table></figure><p><code>SystemRandom</code>生成的序列不可重复，因为随机来自系统，而不是软件层面的状态（实际上，<code>seed()</code>和<code>setstate()</code>不起任何作用）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 random_system_random.py</span><br><br>Default initializiation:<br><br>0.110  0.481<br>0.624  0.350<br>0.378  0.056<br><br>Same seed:<br><br>0.634  0.731<br>0.893  0.843<br>0.065  0.177<br></code></pre></td></tr></table></figure><h3 id="非均匀分布">非均匀分布</h3><p>虽然<code>random</code>生成的均匀分布值在很多方面有用，但是其他分布能更加准确地针对特定问题建模。<code>random</code>模块也提供生成这些分布的函数。函数罗列如下，但不包含细节，因为它们的用途是特定的并需要更复杂的例子。</p><p><strong>正态</strong></p><p>正态分布广泛应用于非均匀的连续值，例如成绩、身高、体重等等。正态分布生成的曲线形状独特，被称为“钟形曲线”。random提供了两个函数生成正态分布的函数，<code>normalvariate()</code>和稍快的<code>gauss()</code>（正态分布又叫做Guassian分布）。</p><p>相关函数<code>lognormalvariate()</code>生成一组伪随机数，它们的对数满足正态分布。对数正态分布对于不相互作用的随机变量的乘积很有用。</p><p><strong>近似</strong></p><p>三角分布用于描述小型样本的近似分布。三角分布的曲线在已知的最大值和最小值处具有最低点，在众数处具有最高点，这是基于“最可能”结果的估计（由<code>triangular()</code>的众数参数反映）。</p><p><strong>指数</strong></p><p><code>expovariate()</code>生成的指数分布，用于模拟均匀泊松过程的到达时间或时间间隔值，例如放射性衰变或请求进入服务器的速率。</p><p>帕累托分布，又称幂律，匹配了许多观测到的现象，并由Chris Anderson在 <em>The Long Tail</em> 中推广。<code>paretovariate()</code>函数对于模拟个体资源的分配很有用（财富对个人，对音乐家的需求，博客的关注等等）。</p><p><strong>角度</strong></p><p>冯米塞斯分布，又称循环正态分布（由<code>vonmissesvariate()</code>生成）用于计算循环值的概率，例如角度，日历日(cm calendar days)，时间。</p><p><strong>大小(cm size)</strong></p><p>由<code>betavariate()</code>生成的 $\Beta$分布，广泛应用于贝叶斯统计和应用中，例如任务工期建模。</p><p>由<code>gammavariative</code>生成的 $\Gamma$分布，用于建模计算诸如等待时间，降雨量，计算误差的大小(cm size)。</p><p>由<code>weibullvariate()</code>计算得出的韦伯分布用于失效分析，工业设计，天气预报。他描述了粒子或其他离散物体大小(cm size)的分布。</p><blockquote><p><strong>See also</strong></p><ul><li><a href="https://docs.python.org/3.7/library/random.html">Standard library documentation for random</a></li><li>“Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator” – Article by M. Matsumoto and T. Nishimura from <em>ACM Transactions on Modeling and Computer Simulation</em> Vol. 8, No. 1, January pp.3-30 1998.</li><li><a href="https://en.wikipedia.org/wiki/Mersenne_twister">Wikipedia: Mersenne Twister</a> – Article about the pseudorandom generator algorithm used by Python.</li><li><a href="https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)">Wikipedia: Uniform distribution</a> – Article about continuous uniform distributions in statistics.</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【译】Python 标准库教程——math 模块</title>
    <link href="/2020/02/15/python-math/"/>
    <url>/2020/02/15/python-math/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇通过例子学习 Python 标准库 math 的教程。math 库提供了许多便捷的函数，能够计算常规数学运算、三角函数、双曲函数和部分特殊函数。</p></blockquote><blockquote><p>本文翻译自 Doug Hellmann 的 PyMOTW-3 项目的 math 模块。<a href="https://link.zhihu.com/?target=https%3A//pymotw.com/3/math/index.html">原文链接</a>。本文使用<a href="https://link.zhihu.com/?target=https%3A//creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">cc-by-nc-sa 4.0</a>协议共享。</p></blockquote><h2 id="math-—-数学函数">math — 数学函数</h2><p><strong>目的：</strong> 为特殊数学运算提供函数。</p><p><code>math</code> 模块实现了许多 IEEE 使用浮点数进行复杂数学运算的函数，包括对数和三角函数运算，这些函数通常可以在本地 C 库找到。</p><h3 id="特殊常量">特殊常量</h3><p>许多数学运算基于特殊常量。<code>math</code>提供的值有， $\pi$(pi), e, <code>nan</code>(不是数字)，和$\infin$。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_constants.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  π: &#123;:.30f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(math.pi))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  e: &#123;:.30f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(math.e))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nan: &#123;:.30f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(math.nan))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;inf: &#123;:.30f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(math.inf))<br><br></code></pre></td></tr></table></figure><p>$\pi$和 e 的精度仅受平台浮点C语言库限制。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_constants.py<br><br>  π: 3.141592653589793115997963468544<br>  e: 2.718281828459045090795598298428<br>nan: nan<br>inf: inf<br></code></pre></td></tr></table></figure><h3 id="测试异常值">测试异常值</h3><p>浮点数计算会产生两类异常值。第一类是<code>inf</code>( $\infin$），当用于保存浮点数的双精度值从绝对值较大的数溢出时出现。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_isinf.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^3&#125; &#123;:6&#125; &#123;:6&#125; &#123;:6&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;x**2&#x27;</span>, <span class="hljs-string">&#x27;isinf&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^3&#125; &#123;:-^6&#125; &#123;:-^6&#125; &#123;:-^6&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">201</span>, <span class="hljs-number">20</span>):<br>    x = <span class="hljs-number">10.0</span> ** e<br>    y = x * x<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:3d&#125; &#123;:&lt;6g&#125; &#123;:&lt;6g&#125; &#123;!s:6&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        e, x, y, math.isinf(y),<br>    ))<br></code></pre></td></tr></table></figure><p>当此例的指数增加到足够大时，x 的平方不再包含于双精度值，并将该值记录为无穷。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_isinf.py<br><br> e  x      x**2   isinf<br>--- ------ ------ ------<br>  0 1      1      False<br> 20 1e+20  1e+40  False<br> 40 1e+40  1e+80  False<br> 60 1e+60  1e+120 False<br> 80 1e+80  1e+160 False<br>100 1e+100 1e+200 False<br>120 1e+120 1e+240 False<br>140 1e+140 1e+280 False<br>160 1e+160 inf    True<br>180 1e+180 inf    True<br>200 1e+200 inf    True<br></code></pre></td></tr></table></figure><p>然而，并不是所有的浮点溢出都会导致<code>inf</code>值。特别地，使用浮点数计算指数会导致 OverflowError，而不是保留<code>inf</code>结果。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_overflow.py</span><br><br>x = <span class="hljs-number">10.0</span> ** <span class="hljs-number">200</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x    =&#x27;</span>, x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x*x  =&#x27;</span>, x * x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x**2 =&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(x ** <span class="hljs-number">2</span>)<br><span class="hljs-keyword">except</span> OverflowError <span class="hljs-keyword">as</span> err:<br>    <span class="hljs-built_in">print</span>(err)<br></code></pre></td></tr></table></figure><p>这种差别是由 C Python 解释器使用的库的实现差异引起的。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_overflow.py<br><br>x    = 1e+200<br>x*x  = inf<br>x**2 = (34, &#x27;Result too large&#x27;)<br></code></pre></td></tr></table></figure><p>使用无穷值的除法是未定义的。一个数除以无穷的结果是 <code>nan</code>（不是数字）。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_isnan.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>x = (<span class="hljs-number">10.0</span> ** <span class="hljs-number">200</span>) * (<span class="hljs-number">10.0</span> ** <span class="hljs-number">200</span>)<br>y = x / x<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x =&#x27;</span>, x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;isnan(x) =&#x27;</span>, math.isnan(x))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y = x / x =&#x27;</span>, x / x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y == nan =&#x27;</span>, y == <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;nan&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;isnan(y) =&#x27;</span>, math.isnan(y))<br></code></pre></td></tr></table></figure><p><code>nan</code>不与任何值相等，包括它本身，所以需用 <code>isnan()</code> 检查 <code>nan</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_isnan.py<br><br>x = inf<br>isnan(x) = False<br>y = x / x = nan<br>y == nan = False<br>isnan(y) = True<br></code></pre></td></tr></table></figure><p>使用<code>isfinite（）</code>检查常规数与特殊值<code>inf</code>或<code>nan</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_isfinite.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> [<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, math.pi, math.e, math.inf, math.nan]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:5.2f&#125; &#123;!s&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f, math.isfinite(f)))<br></code></pre></td></tr></table></figure><p>对于特殊值，<code>isfinite()</code>返回 false，否则返回 true。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_isfinite.py<br><br> 0.00 True<br> 1.00 True<br> 3.14 True<br> 2.72 True<br>  inf False<br>  nan False<br></code></pre></td></tr></table></figure><h3 id="比较">比较</h3><p>比较浮点数会容易出错，这是因为，计算的每个步骤都可能由于数值表示而引入误差。<code>isclose()</code>函数使用稳健的算法来最小化这些错误，并提供相对和绝对比较的方法。所用的公式等价于</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)<br></code></pre></td></tr></table></figure><p>默认情况下，<code>isclose()</code>使用公差设置为 <code>1e-09</code>的相对比较，这意味着两值之差必须小于等于 <code>1e-09</code>乘以 a 和 b 中较大的绝对值。将关键参数<code>rel_tol</code>传给<code>isclose()</code>可改变公差。在此例，这些值必须相差 10％以内。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_isclose.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>INPUTS = [<br>    (<span class="hljs-number">1000</span>, <span class="hljs-number">900</span>, <span class="hljs-number">0.1</span>),<br>    (<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">0.1</span>),<br>    (<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0.1</span>),<br>    (<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>),<br>    (<span class="hljs-number">0.1</span>, <span class="hljs-number">0.09</span>, <span class="hljs-number">0.1</span>),<br>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;rel_tol&#x27;</span>, <span class="hljs-string">&#x27;abs(a-b)&#x27;</span>, <span class="hljs-string">&#x27;tolerance&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>)<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>),<br>)<br><br>fmt = <span class="hljs-string">&#x27;&#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125; &#123;!s:&gt;8&#125;&#x27;</span><br><br><span class="hljs-keyword">for</span> a, b, rel_tol <span class="hljs-keyword">in</span> INPUTS:<br>    close = math.isclose(a, b, rel_tol=rel_tol)<br>    tolerance = rel_tol * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b))<br>    abs_diff = <span class="hljs-built_in">abs</span>(a - b)<br>    <span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(a, b, rel_tol, abs_diff, tolerance, close))<br></code></pre></td></tr></table></figure><p>因为误差设置为 0.1，0.1 和 0.09 的比较返回<code>Flase</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_isclose.py<br>##    a        b     rel_tol  abs(a-b) tolerance  close -------- -------- -------- -------- --------<br> 1000.00   900.00     0.10   100.00   100.00     True<br>  100.00    90.00     0.10    10.00    10.00     True<br>   10.00     9.00     0.10     1.00     1.00     True<br>    1.00     0.90     0.10     0.10     0.10     True<br>    0.10     0.09     0.10     0.01     0.01    False<br></code></pre></td></tr></table></figure><p>要使用固定或 “绝对” 的公差，请传递<code>abs_tol</code>而不是<code>rel_tol</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_isclose_abs_tol.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>INPUTS = [<br>    (<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span> + <span class="hljs-number">1e-07</span>, <span class="hljs-number">1e-08</span>),<br>    (<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span> + <span class="hljs-number">1e-08</span>, <span class="hljs-number">1e-08</span>),<br>    (<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span> + <span class="hljs-number">1e-09</span>, <span class="hljs-number">1e-08</span>),<br>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^8&#125; &#123;:^11&#125; &#123;:^8&#125; &#123;:^10&#125; &#123;:^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;abs_tol&#x27;</span>, <span class="hljs-string">&#x27;abs(a-b)&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>)<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^8&#125; &#123;:-^11&#125; &#123;:-^8&#125; &#123;:-^10&#125; &#123;:-^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>),<br>)<br><br><span class="hljs-keyword">for</span> a, b, abs_tol <span class="hljs-keyword">in</span> INPUTS:<br>    close = math.isclose(a, b, abs_tol=abs_tol)<br>    abs_diff = <span class="hljs-built_in">abs</span>(a - b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:8.2f&#125; &#123;:11&#125; &#123;:8&#125; &#123;:0.9f&#125; &#123;!s:&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        a, b, abs_tol, abs_diff, close))<br></code></pre></td></tr></table></figure><p>对于绝对公差，输入值之间的差必须小于给定的公差。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_isclose_abs_tol.py<br>##    a          b      abs_tol   abs(a-b)   close ----------- -------- ---------- --------<br>    1.00   1.0000001    1e-08 0.000000100    False<br>    1.00  1.00000001    1e-08 0.000000010     True<br>    1.00 1.000000001    1e-08 0.000000001     True<br></code></pre></td></tr></table></figure><p><code>nan</code>和<code>inf</code>是特例。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_isclose_inf.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nan, nan:&#x27;</span>, math.isclose(math.nan, math.nan))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nan, 1.0:&#x27;</span>, math.isclose(math.nan, <span class="hljs-number">1.0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;inf, inf:&#x27;</span>, math.isclose(math.inf, math.inf))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;inf, 1.0:&#x27;</span>, math.isclose(math.inf, <span class="hljs-number">1.0</span>))<br></code></pre></td></tr></table></figure><p><code>nan</code>永远不接近另一个值，包括它本身。 <code>inf</code>仅仅接近自身。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_isclose_inf.py<br><br>nan, nan: False<br>nan, 1.0: False<br>inf, inf: True<br>inf, 1.0: False<br></code></pre></td></tr></table></figure><h3 id="浮点数到整数的转换">浮点数到整数的转换</h3><p><code>math</code> 模块提供了三个用来转换浮点数为整数的函数。每个函数都采用不同的方法，并将在不同的情况下很有用。</p><p>最简单的是<code>trunc()</code>，它会截断小数点后的数字，仅保留构成值的整数部分的有效数字。<code>floor()</code>将输入值转换为最大的在前整数，<code>ceil()</code>(天花板) 返回在输入值之后顺序产生最大的整数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_integers.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>HEADINGS = (<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;trunk&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(*HEADINGS))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>,<br>))<br><br>fmt = <span class="hljs-string">&#x27;&#123;:5.1f&#125; &#123;:5.1f&#125; &#123;:5.1f&#125; &#123;:5.1f&#125; &#123;:5.1f&#125;&#x27;</span><br><br>TEST_VALUES = [<br>    -<span class="hljs-number">1.5</span>,<br>    -<span class="hljs-number">0.8</span>,<br>    -<span class="hljs-number">0.5</span>,<br>    -<span class="hljs-number">0.2</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0.2</span>,<br>    <span class="hljs-number">0.5</span>,<br>    <span class="hljs-number">0.8</span>,<br>    <span class="hljs-number">1</span>,<br>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> TEST_VALUES:<br>    <span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(<br>        i,<br>        <span class="hljs-built_in">int</span>(i),<br>        math.trunc(i),<br>        math.floor(i),<br>        math.ceil(i),<br>    ))<br></code></pre></td></tr></table></figure><p><code>trunc()</code>等价于直接转换为<code>int</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_integers.py<br>##   i    int  trunk floor ceil ----- ----- ----- -----<br> -1.5  -1.0  -1.0  -2.0  -1.0<br> -0.8   0.0   0.0  -1.0   0.0<br> -0.5   0.0   0.0  -1.0   0.0<br> -0.2   0.0   0.0  -1.0   0.0<br>  0.0   0.0   0.0   0.0   0.0<br>  0.2   0.0   0.0   0.0   1.0<br>  0.5   0.0   0.0   0.0   1.0<br>  0.8   0.0   0.0   0.0   1.0<br>  1.0   1.0   1.0   1.0   1.0<br></code></pre></td></tr></table></figure><p><code>modf()</code>接受单个浮点数，并返回一个包含输入值的小数和整数部分的元组。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_modf.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;/2 = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, math.modf(i / <span class="hljs-number">2.0</span>)))<br></code></pre></td></tr></table></figure><p>返回值中的两数均为浮点数。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_modf.py<br><br>0/2 = (0.0, 0.0)<br>1/2 = (0.5, 0.0)<br>2/2 = (0.0, 1.0)<br>3/2 = (0.5, 1.0)<br>4/2 = (0.0, 2.0)<br>5/2 = (0.5, 2.0)<br></code></pre></td></tr></table></figure><p><code>frexp()</code>返回浮点数的尾数和指数，可用于创建该值更可移植的表示形式。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">math_frexp.py<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^7&#125; &#123;:^7&#125; &#123;:^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">4.0</span>]:<br>    m, e = math.frexp(x)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:7.2f&#125; &#123;:7.2f&#125; &#123;:7d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, m, e))<br></code></pre></td></tr></table></figure><p><code>frexp()</code>使用公式<code>x = m * 2 ** e</code>，并返回值<code>m</code>和<code>e</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_frexp.py<br>##    x       m       e ------- -------<br>   0.10    0.80      -3<br>   0.50    0.50       0<br>   4.00    0.50       3<br></code></pre></td></tr></table></figure><p><code>ldexp()</code>是<code>frexp()</code>的反函数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_ldexp.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^7&#125; &#123;:^7&#125; &#123;:^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br>INPUTS = [<br>    (<span class="hljs-number">0.8</span>, -<span class="hljs-number">3</span>),<br>    (<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>),<br>    (<span class="hljs-number">0.5</span>, <span class="hljs-number">3</span>),<br>]<br><br><span class="hljs-keyword">for</span> m, e <span class="hljs-keyword">in</span> INPUTS:<br>    x = math.ldexp(m, e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:7.2f&#125; &#123;:7d&#125; &#123;:7.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m, e, x))<br></code></pre></td></tr></table></figure><h3 id="正负号">正负号</h3><p>数字的绝对值是不带符号的值。 使用<code>fabs()</code>计算浮点数的绝对值。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># math_fabs.py<br><br>import math<br><br>print(math.fabs(-1.1))<br>print(math.fabs(-0.0))<br>print(math.fabs(0.0))<br>print(math.fabs(1.1))<br></code></pre></td></tr></table></figure><p>实际上，浮点数的绝对值表示为正值。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_fabs.py<br><br>1.1<br>0.0<br>0.0<br>1.1<br></code></pre></td></tr></table></figure><p>为确定值的符号，可以赋予一组值相同的符号或比较两个值，使用<code>copysign()</code>设置已知有效值的符号。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_copysign.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>HEADINGS = (<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;&lt; 0&#x27;</span>, <span class="hljs-string">&#x27;&gt; 0&#x27;</span>, <span class="hljs-string">&#x27;= 0&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125; &#123;:^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(*HEADINGS))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125; &#123;:-^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>,<br>))<br><br>VALUES = [<br>    -<span class="hljs-number">1.0</span>,<br>    <span class="hljs-number">0.0</span>,<br>    <span class="hljs-number">1.0</span>,<br>    <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>),<br>    <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>),<br>    <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-nan&#x27;</span>),<br>    <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;nan&#x27;</span>),<br>]<br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> VALUES:<br>    s = <span class="hljs-built_in">int</span>(math.copysign(<span class="hljs-number">1</span>, f))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:5.1f&#125; &#123;:5d&#125; &#123;!s:5&#125; &#123;!s:5&#125; &#123;!s:5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        f, s, f &lt; <span class="hljs-number">0</span>, f &gt; <span class="hljs-number">0</span>, f == <span class="hljs-number">0</span>,<br>    ))<br></code></pre></td></tr></table></figure><p>像<code>copysign()</code>这样的额外函数是必需的，因为把<code>nan</code>和<code>-nan</code>直接与其他值比较是不可行的。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_copysign.py<br>##   f     s    &lt; 0   &gt; 0   = 0 ----- ----- ----- -----<br> -1.0    -1 True  False False<br>  0.0     1 False False True<br>  1.0     1 False True  False<br> -inf    -1 True  False False<br>  inf     1 False True  False<br>  nan    -1 False False False<br>  nan     1 False False False<br></code></pre></td></tr></table></figure><h3 id="常用计算">常用计算</h3><p>在二进制浮点内存中表示准确值具有挑战性。一些值不能被准确表示，并且通过重复计算操作某个值的频率越高，出现表示错误的可能性越高。<code>math</code>模块提供了计算浮点数序列之和的函数，该函数使用有效的算法最小化这些错误。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_fsum.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>values = [<span class="hljs-number">0.1</span>] * <span class="hljs-number">10</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Input values:&#x27;</span>, values)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sum()       : &#123;:.20f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">sum</span>(values)))<br><br>s = <span class="hljs-number">0.0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> values:<br>    s += i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;for-loop    : &#123;:.20f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(s))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;math.fsum() : &#123;:.20f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(math.fsum(values)))<br></code></pre></td></tr></table></figure><p>给定十个值的序列，每个值都是 0.1，序列和的预期值为 1.0。然而，由于 0.1 不能被精确地表示为浮点数，误差将被引入到求和中，除非使用<code>fsum()</code>进行计算。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_fsum.py<br><br>Input values: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]<br>sum()       : 0.99999999999999988898<br>for-loop    : 0.99999999999999988898<br>math.fsum() : 1.00000000000000000000<br></code></pre></td></tr></table></figure><p><code>factorial()</code>通常用来计算对象序列的排列数和组合数。正整数 n 的阶乘，表示为 n! ，其定义为递归地 (n - 1) !* n，以 0!= = 1 结束。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_factorial.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.1</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:2.0f&#125; &#123;:6.0f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, math.factorial(i)))<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error computing factorial(&#123;&#125;): &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, err))<br></code></pre></td></tr></table></figure><p><code>factorial()</code>仅适用于整数，但会接受浮点参数，只要它们可以转换为整数而不会丢失值。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_factorial.py<br><br> 0      1<br> 1      1<br> 2      2<br> 3      6<br> 4     24<br> 5    120<br>Error computing factorial(6.1): factorial() only accepts integral values<br></code></pre></td></tr></table></figure><p><code>gamma()</code>与<code>factorial()</code>相似，除了它处理的是实数且值向下移动了一位 ( <code>gammar()</code>等价于 (n-1)! )。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_gamma.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">6.6</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:2.1f&#125; &#123;:6.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, math.gamma(i)))<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error computing gamma(&#123;&#125;): &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, err))<br></code></pre></td></tr></table></figure><p>由于 0 会导致初始值为负，故不允许这样做。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_gamma.py<br><br>Error computing gamma(0): math domain error<br>1.1   0.95<br>2.2   1.10<br>3.3   2.68<br>4.4  10.14<br>5.5  52.34<br>6.6 344.70<br></code></pre></td></tr></table></figure><p><code>lgamma()</code>返回输入值的 gamma 绝对值的自然对数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_lgamma.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">6.6</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:2.1f&#125; &#123;:.20f&#125; &#123;:.20f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>            i,<br>            math.lgamma(i),<br>            math.log(math.gamma(i)),<br>        ))<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error computing lgamma(&#123;&#125;): &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, err))<br></code></pre></td></tr></table></figure><p>使用<code>lgamma()</code>比使用<code>gamma()</code>的结果单独计算对数保留更高的精度。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_lgamma.py<br><br>Error computing lgamma(0): math domain error<br>1.1 -0.04987244125984036103 -0.04987244125983997245<br>2.2 0.09694746679063825923 0.09694746679063866168<br>3.3 0.98709857789473387513 0.98709857789473409717<br>4.4 2.31610349142485727469 2.31610349142485727469<br>5.5 3.95781396761871651080 3.95781396761871606671<br>6.6 5.84268005527463252236 5.84268005527463252236<br></code></pre></td></tr></table></figure><p>取模运算符 (%) 用来计算除法表达式的余数 (i.e., <code>5 % 2 = 1</code>) 。内置在语言中的算符可以很好的处理整数，但与许多其他浮点运算符一样，间接计算会导致数据丢失的代表性问题。<code>fmod()</code>为浮点数提供了更精确的实现。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_fmod.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^4&#125; &#123;:^4&#125; &#123;:^5&#125; &#123;:^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^4&#125; &#123;:-^4&#125; &#123;:-^5&#125; &#123;:-^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br><br>INPUTS = [<br>    (<span class="hljs-number">5</span>, <span class="hljs-number">2</span>),<br>    (<span class="hljs-number">5</span>, -<span class="hljs-number">2</span>),<br>    (-<span class="hljs-number">5</span>, <span class="hljs-number">2</span>),<br>]<br><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> INPUTS:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:4.1f&#125; &#123;:4.1f&#125; &#123;:5.2f&#125; &#123;:5.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        x,<br>        y,<br>        x % y,<br>        math.fmod(x, y),<br>    ))<br></code></pre></td></tr></table></figure><p>一个更常见的潜在混淆源是，<code>fmod()</code>用于计算模数的算法与算符<code>％</code>使用的算法不同，因此结果的符号不同。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_fmod.py<br>##  x    y     %   fmod ---- ----- -----<br> 5.0  2.0  1.00  1.00<br> 5.0 -2.0 -1.00  1.00<br>-5.0  2.0  1.00 -1.00<br></code></pre></td></tr></table></figure><p>使用<code>gcd()</code>寻找能被两数整除的最大整数，即最大公约数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_gcd.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(math.gcd(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(math.gcd(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(math.gcd(<span class="hljs-number">50</span>, <span class="hljs-number">225</span>))<br><span class="hljs-built_in">print</span>(math.gcd(<span class="hljs-number">11</span>, <span class="hljs-number">9</span>))<br><span class="hljs-built_in">print</span>(math.gcd(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>如果两个值都为 0，则结果为 0。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_gcd.py<br><br>2<br>10<br>25<br>1<br>0<br></code></pre></td></tr></table></figure><h3 id="指数和对数">指数和对数</h3><p>指数增长曲线出现在经济学，物理学和其他科学中。 Python 具有内置的幂运算符（“ **”），但当需要可调用函数作为另一个函数的参数时，<code>pow()</code>可能会很有用。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_pow.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>INPUTS = [<br>    <span class="hljs-comment"># Typical uses</span><br>    (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>),<br>    (<span class="hljs-number">2.1</span>, <span class="hljs-number">3.2</span>),<br><br>    <span class="hljs-comment"># Always 1</span><br>    (<span class="hljs-number">1.0</span>, <span class="hljs-number">5</span>),<br>    (<span class="hljs-number">2.0</span>, <span class="hljs-number">0</span>),<br><br>    <span class="hljs-comment"># Not-a-number</span><br>    (<span class="hljs-number">2</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;nan&#x27;</span>)),<br><br>    <span class="hljs-comment"># Roots</span><br>    (<span class="hljs-number">9.0</span>, <span class="hljs-number">0.5</span>),<br>    (<span class="hljs-number">27.0</span>, <span class="hljs-number">1.0</span> / <span class="hljs-number">3</span>),<br>]<br><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> INPUTS:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:5.1f&#125; ** &#123;:5.3f&#125; = &#123;:6.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        x, y, math.<span class="hljs-built_in">pow</span>(x, y)))<br></code></pre></td></tr></table></figure><p>将 1 增加到任意幂总是返回 1.0，将任意值增加到 0 次方也是如此。对非数字值<code>nan</code>的大多数操作都返回<code>nan</code>。 如果指数小于 1，则<code>pow()</code>计算开方。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_pow.py<br><br>  2.0 ** 3.000 =  8.000<br>  2.1 ** 3.200 = 10.742<br>  1.0 ** 5.000 =  1.000<br>  2.0 ** 0.000 =  1.000<br>  2.0 **   nan =    nan<br>  9.0 ** 0.500 =  3.000<br> 27.0 ** 0.333 =  3.000<br></code></pre></td></tr></table></figure><p>由于平方根（1/2 的指数）被频繁使用，因此有一个可以单独计算的函数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_sqrt.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(math.sqrt(<span class="hljs-number">9.0</span>))<br><span class="hljs-built_in">print</span>(math.sqrt(<span class="hljs-number">3</span>))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(math.sqrt(-<span class="hljs-number">1</span>))<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> err:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Cannot compute sqrt(-1):&#x27;</span>, err)<br></code></pre></td></tr></table></figure><p>计算负数的平方根需要用到复数，这不是<code>math</code>能处理的。任何计算负数平方根的尝试都会导致 ValueError。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">$ python3 math_sqrt.py<br><br><span class="hljs-number">3.0</span><br><span class="hljs-number">1.7320508075688772</span><br>Cannot compute sqrt(-<span class="hljs-number">1</span>): math domain error<br></code></pre></td></tr></table></figure><p>对数函数在当 x = b ** y 时找到 y 。默认情况下，<code>log()</code>计算自然对数 (以 e 为底数)。如果提供第二个参数，则以该值为底数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_log.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(math.log(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(math.log(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(math.log(<span class="hljs-number">0.5</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>当 x &lt; 1 时的对数结果为负。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_log.py<br><br>2.0794415416798357<br>3.0<br>-1.0<br></code></pre></td></tr></table></figure><p>给定浮点数表示法和舍入误差，<code>log(x，b)</code>产生的计算值的准确性有限，尤其是对于某些基数而言。 <code>log10()</code>使用比<code>log()</code>更精确的算法来计算<code>log(x，10)</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># math_log10.py<br><br>import math<br><br>print(&#x27;&#123;:2&#125; &#123;:^12&#125; &#123;:^10&#125; &#123;:^20&#125; &#123;:8&#125;&#x27;.format(<br>    &#x27;i&#x27;, &#x27;x&#x27;, &#x27;accurate&#x27;, &#x27;inaccurate&#x27;, &#x27;mismatch&#x27;,<br>))<br>print(&#x27;&#123;:-^2&#125; &#123;:-^12&#125; &#123;:-^10&#125; &#123;:-^20&#125; &#123;:-^8&#125;&#x27;.format(<br>    &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;,<br>))<br><br>for i in range(0, 10):<br>    x = math.pow(10, i)<br>    accurate = math.log10(x)<br>    inaccurate = math.log(x, 10)<br>    match = &#x27;&#x27; if int(inaccurate) == i else &#x27;*&#x27;<br>    print(&#x27;&#123;:2d&#125; &#123;:12.1f&#125; &#123;:10.8f&#125; &#123;:20.18f&#125; &#123;:^5&#125;&#x27;.format(<br>        i, x, accurate, inaccurate, match,<br>    ))<br></code></pre></td></tr></table></figure><p>输出结尾中带有 * 标记的显示了不精确的值。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_log10.py<br><br>i       x        accurate       inaccurate      mismatch<br>-- ------------ ---------- -------------------- --------<br> 0          1.0 0.00000000 0.000000000000000000<br> 1         10.0 1.00000000 1.000000000000000000<br> 2        100.0 2.00000000 2.000000000000000000<br> 3       1000.0 3.00000000 2.999999999999999556   *<br> 4      10000.0 4.00000000 4.000000000000000000<br> 5     100000.0 5.00000000 5.000000000000000000<br> 6    1000000.0 6.00000000 5.999999999999999112   *<br> 7   10000000.0 7.00000000 7.000000000000000000<br> 8  100000000.0 8.00000000 8.000000000000000000<br> 9 1000000000.0 9.00000000 8.999999999999998224   *<br></code></pre></td></tr></table></figure><p>与<code>log10()</code>相似，<code>log2()</code>计算等价于<code>math.log(x, 2)</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_log2.py</span><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&gt;2&#125; &#123;:^5&#125; &#123;:^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;log2&#x27;</span>,<br>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^2&#125; &#123;:-^5&#125; &#123;:-^5&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>,<br>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>):<br>    x = math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, i)<br>    result = math.log2(x)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:2d&#125; &#123;:5.1f&#125; &#123;:5.1f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        i, x, result,<br>    ))<br></code></pre></td></tr></table></figure><p>根据底层平台的不同，内置的和专用的函数通过使用以 2 为底的专用算法，可提供更好的性能和准确性，这是更通用的函数所没有的。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_log2.py<br><br> i   x   log2<br>-- ----- -----<br> 0   1.0   0.0<br> 1   2.0   1.0<br> 2   4.0   2.0<br> 3   8.0   3.0<br> 4  16.0   4.0<br> 5  32.0   5.0<br> 6  64.0   6.0<br> 7 128.0   7.0<br> 8 256.0   8.0<br> 9 512.0   9.0<br></code></pre></td></tr></table></figure><p><code>log1p()</code>计算牛顿 - 墨卡托级数 (1+x 的自然对数)。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_log1p.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>x = <span class="hljs-number">0.0000000000000000000000001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x       :&#x27;</span>, x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1 + x   :&#x27;</span>, <span class="hljs-number">1</span> + x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;log(1+x):&#x27;</span>, math.log(<span class="hljs-number">1</span> + x))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;log1p(x):&#x27;</span>, math.log1p(x))<br></code></pre></td></tr></table></figure><p><code>log1p()</code>对于非常接近于零的 x 值更准确，因为它使用了一种补偿初始加法的四舍五入误差的算法。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_log1p.py<br><br>x       : 1e-25<br>1 + x   : 1.0<br>log(1+x): 0.0<br>log1p(x): 1e-25<br></code></pre></td></tr></table></figure><p><code>exp()</code>计算指数函数值 (e**x)。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_exp.py</span><br><span class="hljs-keyword">import</span> math<br><br>x = <span class="hljs-number">2</span><br><br>fmt = <span class="hljs-string">&#x27;&#123;:.20f&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(math.e ** <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(math.<span class="hljs-built_in">pow</span>(math.e, <span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(math.exp(<span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure><p>与其他特殊函数一样，它使用的算法所产生的结果比通用等效的<code>math.pow(math.e，x)</code>更为精确。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_exp.py<br><br>7.38905609893064951876<br>7.38905609893064951876<br>7.38905609893065040694<br></code></pre></td></tr></table></figure><p><code>expm1()</code>是<code>log1p()</code>的反函数，用于计算<code>e ** x - 1</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_expm1.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>x = <span class="hljs-number">0.0000000000000000000000001</span><br><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(math.exp(x) - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(math.expm1(x))<br></code></pre></td></tr></table></figure><p>当分别执行减法时，x 的小值会丢失精度，就像使用<code>log1p()</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_expm1.py<br><br>1e-25<br>0.0<br>1e-25<br></code></pre></td></tr></table></figure><h3 id="角度">角度</h3><p>虽然角度制在日常生活中更常用，但在科学和数学中弧度制是衡量角度的标准单位。1 弧度是由两条线在圆心相交而形成的角度，两条线的末端在圆周上相距一个半径。</p><p>圆的周长记为<code>2πr</code>，因此弧度和之间存在一种联系，该值在三角函数计算中经常出现。这种联系使得弧度被应用在三角学和微积分中，因为使用它们可产生更紧凑的公式。</p><p>要将度转换为弧度，请使用<code>radians()</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_radians.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^7&#125; &#123;:^7&#125; &#123;:^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;Degrees&#x27;</span>, <span class="hljs-string">&#x27;Radians&#x27;</span>, <span class="hljs-string">&#x27;Expected&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br>INPUTS = [<br>    (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>    (<span class="hljs-number">30</span>, math.pi / <span class="hljs-number">6</span>),<br>    (<span class="hljs-number">45</span>, math.pi / <span class="hljs-number">4</span>),<br>    (<span class="hljs-number">60</span>, math.pi / <span class="hljs-number">3</span>),<br>    (<span class="hljs-number">90</span>, math.pi / <span class="hljs-number">2</span>),<br>    (<span class="hljs-number">180</span>, math.pi),<br>    (<span class="hljs-number">270</span>, <span class="hljs-number">3</span> / <span class="hljs-number">2.0</span> * math.pi),<br>    (<span class="hljs-number">360</span>, <span class="hljs-number">2</span> * math.pi),<br>]<br><br><span class="hljs-keyword">for</span> deg, expected <span class="hljs-keyword">in</span> INPUTS:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:7d&#125; &#123;:7.2f&#125; &#123;:7.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        deg,<br>        math.radians(deg),<br>        expected,<br>    ))<br></code></pre></td></tr></table></figure><p>转换公式为<code>rad = deg *π/ 180</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_radians.py<br>## Degrees Radians Expected ------- -------<br>      0    0.00    0.00<br>     30    0.52    0.52<br>     45    0.79    0.79<br>     60    1.05    1.05<br>     90    1.57    1.57<br>    180    3.14    3.14<br>    270    4.71    4.71<br>    360    6.28    6.28<br></code></pre></td></tr></table></figure><p>要将弧度转换为度，请使用<code>degree()</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_degrees.py</span><br><br><span class="hljs-keyword">import</span> math<br><br>INPUTS = [<br>    (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>    (math.pi / <span class="hljs-number">6</span>, <span class="hljs-number">30</span>),<br>    (math.pi / <span class="hljs-number">4</span>, <span class="hljs-number">45</span>),<br>    (math.pi / <span class="hljs-number">3</span>, <span class="hljs-number">60</span>),<br>    (math.pi / <span class="hljs-number">2</span>, <span class="hljs-number">90</span>),<br>    (math.pi, <span class="hljs-number">180</span>),<br>    (<span class="hljs-number">3</span> * math.pi / <span class="hljs-number">2</span>, <span class="hljs-number">270</span>),<br>    (<span class="hljs-number">2</span> * math.pi, <span class="hljs-number">360</span>),<br>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;Radians&#x27;</span>, <span class="hljs-string">&#x27;Degrees&#x27;</span>, <span class="hljs-string">&#x27;Expected&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><span class="hljs-keyword">for</span> rad, expected <span class="hljs-keyword">in</span> INPUTS:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        rad,<br>        math.degrees(rad),<br>        expected,<br>    ))<br></code></pre></td></tr></table></figure><p>转换公式为<code>deg = rad * 180 / π</code>.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_degrees.py<br>## Radians  Degrees  Expected -------- --------<br>    0.00     0.00     0.00<br>    0.52    30.00    30.00<br>    0.79    45.00    45.00<br>    1.05    60.00    60.00<br>    1.57    90.00    90.00<br>    3.14   180.00   180.00<br>    4.71   270.00   270.00<br>    6.28   360.00   360.00<br></code></pre></td></tr></table></figure><h3 id="三角学">三角学</h3><p>三角函数将三角形中的角度与其边长相关联。它们出现在周期性的公式中，如谐波、圆周运动，或处理角度时。标准库中的所有三角函数都采用以弧度表示的角度。给定直角三角形中的某个角度，正弦是与该角度相对的边与斜边的比值（sin A = 相对 / 斜边）。余弦是相邻边与斜边的长度之比（cos A = 相邻 / 斜边）。正切是对边和邻边之比 (tan A = 对边 / 邻边)。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_trig.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^7&#125; &#123;:^7&#125; &#123;:^7&#125; &#123;:^7&#125; &#123;:^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;Degrees&#x27;</span>, <span class="hljs-string">&#x27;Radians&#x27;</span>, <span class="hljs-string">&#x27;Sine&#x27;</span>, <span class="hljs-string">&#x27;Cosine&#x27;</span>, <span class="hljs-string">&#x27;Tangent&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br><br>fmt = <span class="hljs-string">&#x27;&#123;:7.2f&#125; &#123;:7.2f&#125; &#123;:7.2f&#125; &#123;:7.2f&#125; &#123;:7.2f&#125;&#x27;</span><br><br><span class="hljs-keyword">for</span> deg <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">361</span>, <span class="hljs-number">30</span>):<br>    rad = math.radians(deg)<br>    <span class="hljs-keyword">if</span> deg <span class="hljs-keyword">in</span> (<span class="hljs-number">90</span>, <span class="hljs-number">270</span>):<br>        t = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        t = math.tan(rad)<br>    <span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(deg, rad, math.sin(rad), math.cos(rad), t))<br></code></pre></td></tr></table></figure><p><code>tan</code>也可以被定义为角的正弦与其余弦之比，并且由于π/ 2 和 3π/ 2 弧度的余弦为 0，所以<code>tan</code>是无限大的。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_trig.py<br>## Degrees Radians  Sine   Cosine  Tangent ------- ------- ------- -------<br>   0.00    0.00    0.00    1.00    0.00<br>  30.00    0.52    0.50    0.87    0.58<br>  60.00    1.05    0.87    0.50    1.73<br>  90.00    1.57    1.00    0.00     inf<br> 120.00    2.09    0.87   -0.50   -1.73<br> 150.00    2.62    0.50   -0.87   -0.58<br> 180.00    3.14    0.00   -1.00   -0.00<br> 210.00    3.67   -0.50   -0.87    0.58<br> 240.00    4.19   -0.87   -0.50    1.73<br> 270.00    4.71   -1.00   -0.00     inf<br> 300.00    5.24   -0.87    0.50   -1.73<br> 330.00    5.76   -0.50    0.87   -0.58<br> 360.00    6.28   -0.00    1.00   -0.00<br></code></pre></td></tr></table></figure><p>给定点<code>(x，y)</code>，点<code>[(0，0), (x，0), (x，y)]</code>构成的三角形的斜边长为<code>（x ** 2 + y ** 2 ）** 1/2</code>，可以用<code>hypot()</code>计算。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_hypot.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^7&#125; &#123;:^7&#125; &#123;:^10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Hypotenuse&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^7&#125; &#123;:-^7&#125; &#123;:-^10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br>POINTS = [<br>    <span class="hljs-comment"># simple points</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>),<br>    (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>),<br>    (math.sqrt(<span class="hljs-number">2</span>), math.sqrt(<span class="hljs-number">2</span>)),<br>    (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>),  <span class="hljs-comment"># 3-4-5 triangle</span><br>    <span class="hljs-comment"># on the circle</span><br>    (math.sqrt(<span class="hljs-number">2</span>) / <span class="hljs-number">2</span>, math.sqrt(<span class="hljs-number">2</span>) / <span class="hljs-number">2</span>),  <span class="hljs-comment"># pi/4 rads</span><br>    (<span class="hljs-number">0.5</span>, math.sqrt(<span class="hljs-number">3</span>) / <span class="hljs-number">2</span>),  <span class="hljs-comment"># pi/3 rads</span><br>]<br><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> POINTS:<br>    h = math.hypot(x, y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:7.2f&#125; &#123;:7.2f&#125; &#123;:7.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, y, h))<br></code></pre></td></tr></table></figure><p>单位圆上的点总是斜边等于 1。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_hypot.py<br>##    X       Y    Hypotenuse ------- ----------<br>   1.00    1.00    1.41<br>  -1.00   -1.00    1.41<br>   1.41    1.41    2.00<br>   3.00    4.00    5.00<br>   0.71    0.71    1.00<br>   0.50    0.87    1.00<br></code></pre></td></tr></table></figure><p>该函数还可以被用来求两点之间的距离。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_distance_2_points.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125; &#123;:^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;X1&#x27;</span>, <span class="hljs-string">&#x27;Y1&#x27;</span>, <span class="hljs-string">&#x27;X2&#x27;</span>, <span class="hljs-string">&#x27;Y2&#x27;</span>, <span class="hljs-string">&#x27;Distance&#x27;</span>,<br>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125; &#123;:-^8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>,<br>))<br><br>POINTS = [<br>    ((<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">6</span>)),<br>    ((-<span class="hljs-number">6</span>, -<span class="hljs-number">6</span>), (-<span class="hljs-number">5</span>, -<span class="hljs-number">5</span>)),<br>    ((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)),  <span class="hljs-comment"># 3-4-5 triangle</span><br>    ((-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)),  <span class="hljs-comment"># 3-4-5 triangle</span><br>]<br><br><span class="hljs-keyword">for</span> (x1, y1), (x2, y2) <span class="hljs-keyword">in</span> POINTS:<br>    x = x1 - x2<br>    y = y1 - y2<br>    h = math.hypot(x, y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125; &#123;:8.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        x1, y1, x2, y2, h,<br>    ))<br></code></pre></td></tr></table></figure><p>使用 x 和 y 值的差将一个端点移至原点，然后将差传递给<code>hypot()</code>。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_distance_2_points.py<br>##    X1       Y1       X2       Y2    Distance -------- -------- -------- --------<br>    5.00     5.00     6.00     6.00     1.41<br>   -6.00    -6.00    -5.00    -5.00     1.41<br>    0.00     0.00     3.00     4.00     5.00<br>   -1.00    -1.00     2.00     3.00     5.00<br></code></pre></td></tr></table></figure><p><code>math</code>还定义了反三角函数。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_inverse_trig.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arcsine(&#123;:.1f&#125;)    = &#123;:5.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r, math.asin(r)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arccosine(&#123;:.1f&#125;)  = &#123;:5.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r, math.acos(r)))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arctangent(&#123;:.1f&#125;) = &#123;:5.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r, math.atan(r)))<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>1.57 约等于π/ 2 或 90 度，即正弦为 1 而余弦为 0 的角度。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_inverse_trig.py<br><br>arcsine(0.0)    =  0.00<br>arccosine(0.0)  =  1.57<br>arctangent(0.0) =  0.00<br><br>arcsine(0.5)    =  0.52<br>arccosine(0.5)  =  1.05<br>arctangent(0.5) =  0.46<br><br>arcsine(1.0)    =  1.57<br>arccosine(1.0)  =  0.00<br>arctangent(1.0) =  0.79<br></code></pre></td></tr></table></figure><h3 id="双曲函数">双曲函数</h3><p>双曲函数出现在线性微分方程中，在处理电磁场、流体力学、狭义相对论和其他高等物理和数学时使用。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_hyperbolic.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^6&#125; &#123;:^6&#125; &#123;:^6&#125; &#123;:^6&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>,<br>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^6&#125; &#123;:-^6&#125; &#123;:-^6&#125; &#123;:-^6&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br>fmt = <span class="hljs-string">&#x27;&#123;:6.4f&#125; &#123;:6.4f&#125; &#123;:6.4f&#125; &#123;:6.4f&#125;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>):<br>    x = i / <span class="hljs-number">10.0</span><br>    <span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(<br>        x,<br>        math.sinh(x),<br>        math.cosh(x),<br>        math.tanh(x),<br>    ))<br></code></pre></td></tr></table></figure><p>余弦函数和正弦函数表示一个圆，而双曲余弦函数和双曲正弦函数表示双曲线的一半。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_hyperbolic.py<br>##   X     sinh   cosh   tanh ------ ------ ------<br>0.0000 0.0000 1.0000 0.0000<br>0.2000 0.2013 1.0201 0.1974<br>0.4000 0.4108 1.0811 0.3799<br>0.6000 0.6367 1.1855 0.5370<br>0.8000 0.8881 1.3374 0.6640<br>1.0000 1.1752 1.5431 0.7616<br></code></pre></td></tr></table></figure><p>反双曲函数<code>acosh()</code>，<code>asinh()</code>和<code>atanh()</code>也可用。</p><h3 id="特殊函数">特殊函数</h3><p>高斯误差函数常用于统计。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_erf.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^5&#125; &#123;:7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;erf(x)&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^5&#125; &#123;:-^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>, -<span class="hljs-number">0.25</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:5.2f&#125; &#123;:7.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, math.erf(x)))<br></code></pre></td></tr></table></figure><p>对于误差函数，<code>erf(-x) == -erf(x)</code>.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_erf.py<br>##   x   erf(x) -------<br>-3.00 -1.0000<br>-2.00 -0.9953<br>-1.00 -0.8427<br>-0.50 -0.5205<br>-0.25 -0.2763<br> 0.00  0.0000<br> 0.25  0.2763<br> 0.50  0.5205<br> 1.00  0.8427<br> 2.00  0.9953<br> 3.00  1.0000<br></code></pre></td></tr></table></figure><p>互补误差函数为<code>1-erf(x)</code>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math_erfc.py</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:^5&#125; &#123;:7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;erfc(x)&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:-^5&#125; &#123;:-^7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>, -<span class="hljs-number">0.25</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:5.2f&#125; &#123;:7.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, math.erfc(x)))<br></code></pre></td></tr></table></figure><p><code>erfc()</code>的实现避免了从 1 减去 x 的小数值的精度误差。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">$ python3 math_erfc.py<br>##   x   erfc(x) -------<br>-3.00  2.0000<br>-2.00  1.9953<br>-1.00  1.8427<br>-0.50  1.5205<br>-0.25  1.2763<br> 0.00  1.0000<br> 0.25  0.7237<br> 0.50  0.4795<br> 1.00  0.1573<br> 2.00  0.0047<br> 3.00  0.0000<br></code></pre></td></tr></table></figure><blockquote><p><strong>See also</strong>- <a href="https://link.zhihu.com/?target=https%3A//docs.python.org/3.7/library/math.html">Standard library documentation for math</a>- <a href="https://link.zhihu.com/?target=http%3A//www.johndcook.com/blog/2009/07/21/ieee-arithmetic-python/">IEEE floating point arithmetic in Python</a> – Blog post by John Cook about how special values arise and are dealt with when doing math in Python.- <a href="https://link.zhihu.com/?target=http%3A//scipy.org/">SciPy</a> – Open source libraryes for scientific and mathematical calculations in Python. - <strong>PEP 485</strong> – “A function for testing approximate equality”</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/08/14/My-First-Blog/"/>
    <url>/2019/08/14/My-First-Blog/</url>
    
    <content type="html"><![CDATA[<p>路漫漫其修远兮，吾将上下而求索。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
